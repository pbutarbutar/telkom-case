// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: carts/carts.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CartsServiceClient is the client API for CartsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartsServiceClient interface {
	AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	ViewProduct(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProductsListResponse, error)
}

type cartsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCartsServiceClient(cc grpc.ClientConnInterface) CartsServiceClient {
	return &cartsServiceClient{cc}
}

func (c *cartsServiceClient) AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/carts.CartsService/AddProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartsServiceClient) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/carts.CartsService/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartsServiceClient) ViewProduct(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProductsListResponse, error) {
	out := new(ProductsListResponse)
	err := c.cc.Invoke(ctx, "/carts.CartsService/ViewProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartsServiceServer is the server API for CartsService service.
// All implementations must embed UnimplementedCartsServiceServer
// for forward compatibility
type CartsServiceServer interface {
	AddProduct(context.Context, *AddProductRequest) (*ProductResponse, error)
	DeleteProduct(context.Context, *DeleteProductRequest) (*ActionResponse, error)
	ViewProduct(context.Context, *Empty) (*ProductsListResponse, error)
	mustEmbedUnimplementedCartsServiceServer()
}

// UnimplementedCartsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCartsServiceServer struct {
}

func (UnimplementedCartsServiceServer) AddProduct(context.Context, *AddProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedCartsServiceServer) DeleteProduct(context.Context, *DeleteProductRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedCartsServiceServer) ViewProduct(context.Context, *Empty) (*ProductsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewProduct not implemented")
}
func (UnimplementedCartsServiceServer) mustEmbedUnimplementedCartsServiceServer() {}

// UnsafeCartsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartsServiceServer will
// result in compilation errors.
type UnsafeCartsServiceServer interface {
	mustEmbedUnimplementedCartsServiceServer()
}

func RegisterCartsServiceServer(s grpc.ServiceRegistrar, srv CartsServiceServer) {
	s.RegisterService(&CartsService_ServiceDesc, srv)
}

func _CartsService_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartsServiceServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carts.CartsService/AddProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartsServiceServer).AddProduct(ctx, req.(*AddProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartsService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartsServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carts.CartsService/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartsServiceServer).DeleteProduct(ctx, req.(*DeleteProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartsService_ViewProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartsServiceServer).ViewProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carts.CartsService/ViewProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartsServiceServer).ViewProduct(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CartsService_ServiceDesc is the grpc.ServiceDesc for CartsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "carts.CartsService",
	HandlerType: (*CartsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProduct",
			Handler:    _CartsService_AddProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _CartsService_DeleteProduct_Handler,
		},
		{
			MethodName: "ViewProduct",
			Handler:    _CartsService_ViewProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "carts/carts.proto",
}
