// Code generated by MockGen. DO NOT EDIT.
// Source: shared/repository/carts/carts.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	__ "grpc-microservice/grpc-app/protos/carts"
	entities "grpc-microservice/shared/models/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCartsRepository is a mock of CartsRepository interface.
type MockCartsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCartsRepositoryMockRecorder
}

// MockCartsRepositoryMockRecorder is the mock recorder for MockCartsRepository.
type MockCartsRepositoryMockRecorder struct {
	mock *MockCartsRepository
}

// NewMockCartsRepository creates a new mock instance.
func NewMockCartsRepository(ctrl *gomock.Controller) *MockCartsRepository {
	mock := &MockCartsRepository{ctrl: ctrl}
	mock.recorder = &MockCartsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartsRepository) EXPECT() *MockCartsRepositoryMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockCartsRepository) AddProduct(ctx context.Context, in *__.AddProductRequest) (entities.Carts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, in)
	ret0, _ := ret[0].(entities.Carts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockCartsRepositoryMockRecorder) AddProduct(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockCartsRepository)(nil).AddProduct), ctx, in)
}

// DeleteProduct mocks base method.
func (m *MockCartsRepository) DeleteProduct(ctx context.Context, productCode string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, productCode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockCartsRepositoryMockRecorder) DeleteProduct(ctx, productCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockCartsRepository)(nil).DeleteProduct), ctx, productCode)
}

// IsExistProductByCode mocks base method.
func (m *MockCartsRepository) IsExistProductByCode(ctx context.Context, in *__.AddProductRequest) (bool, *entities.Carts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistProductByCode", ctx, in)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*entities.Carts)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsExistProductByCode indicates an expected call of IsExistProductByCode.
func (mr *MockCartsRepositoryMockRecorder) IsExistProductByCode(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistProductByCode", reflect.TypeOf((*MockCartsRepository)(nil).IsExistProductByCode), ctx, in)
}

// UpdateCart mocks base method.
func (m *MockCartsRepository) UpdateCart(ctx context.Context, in *__.AddProductRequest) (entities.Carts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCart", ctx, in)
	ret0, _ := ret[0].(entities.Carts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCart indicates an expected call of UpdateCart.
func (mr *MockCartsRepositoryMockRecorder) UpdateCart(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCart", reflect.TypeOf((*MockCartsRepository)(nil).UpdateCart), ctx, in)
}

// ViewProducts mocks base method.
func (m *MockCartsRepository) ViewProducts(ctx context.Context) ([]entities.Carts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewProducts", ctx)
	ret0, _ := ret[0].([]entities.Carts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewProducts indicates an expected call of ViewProducts.
func (mr *MockCartsRepositoryMockRecorder) ViewProducts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewProducts", reflect.TypeOf((*MockCartsRepository)(nil).ViewProducts), ctx)
}
