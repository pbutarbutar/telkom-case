// Code generated by MockGen. DO NOT EDIT.
// Source: shared/usecase/carts/carts.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	__ "grpc-microservice/grpc-app/protos/carts"
	entities "grpc-microservice/shared/models/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCartsUseCase is a mock of CartsUseCase interface.
type MockCartsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCartsUseCaseMockRecorder
}

// MockCartsUseCaseMockRecorder is the mock recorder for MockCartsUseCase.
type MockCartsUseCaseMockRecorder struct {
	mock *MockCartsUseCase
}

// NewMockCartsUseCase creates a new mock instance.
func NewMockCartsUseCase(ctrl *gomock.Controller) *MockCartsUseCase {
	mock := &MockCartsUseCase{ctrl: ctrl}
	mock.recorder = &MockCartsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartsUseCase) EXPECT() *MockCartsUseCaseMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockCartsUseCase) AddProduct(ctx context.Context, in *__.AddProductRequest) (entities.Carts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, in)
	ret0, _ := ret[0].(entities.Carts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockCartsUseCaseMockRecorder) AddProduct(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockCartsUseCase)(nil).AddProduct), ctx, in)
}

// DeleteProduct mocks base method.
func (m *MockCartsUseCase) DeleteProduct(ctx context.Context, productCode string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, productCode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockCartsUseCaseMockRecorder) DeleteProduct(ctx, productCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockCartsUseCase)(nil).DeleteProduct), ctx, productCode)
}

// ViewProduct mocks base method.
func (m *MockCartsUseCase) ViewProduct(ctx context.Context) ([]entities.Carts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewProduct", ctx)
	ret0, _ := ret[0].([]entities.Carts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewProduct indicates an expected call of ViewProduct.
func (mr *MockCartsUseCaseMockRecorder) ViewProduct(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewProduct", reflect.TypeOf((*MockCartsUseCase)(nil).ViewProduct), ctx)
}
