// Code generated by MockGen. DO NOT EDIT.
// Source: shared/usecase/users/users.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	entities "grpc-microservice/shared/models/entities"

	gomock "github.com/golang/mock/gomock"
)

// MockUsersUseCase is a mock of UsersUseCase interface.
type MockUsersUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUsersUseCaseMockRecorder
}

// MockUsersUseCaseMockRecorder is the mock recorder for MockUsersUseCase.
type MockUsersUseCaseMockRecorder struct {
	mock *MockUsersUseCase
}

// NewMockUsersUseCase creates a new mock instance.
func NewMockUsersUseCase(ctrl *gomock.Controller) *MockUsersUseCase {
	mock := &MockUsersUseCase{ctrl: ctrl}
	mock.recorder = &MockUsersUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersUseCase) EXPECT() *MockUsersUseCaseMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUsersUseCase) CreateUser(ctx context.Context, u entities.Users) entities.Users {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, u)
	ret0, _ := ret[0].(entities.Users)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsersUseCaseMockRecorder) CreateUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsersUseCase)(nil).CreateUser), ctx, u)
}

// Login mocks base method.
func (m *MockUsersUseCase) Login(ctx context.Context) entities.Users {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx)
	ret0, _ := ret[0].(entities.Users)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockUsersUseCaseMockRecorder) Login(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUsersUseCase)(nil).Login), ctx)
}
